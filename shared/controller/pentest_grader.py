"""
Pentest grader for MinIO CVE-2020-11012.
Uses the actual auth bypass exploit to verify if the vulnerability is fixed.
"""

import subprocess
import time
import requests
from datetime import datetime
from typing import Dict, Tuple

from .spec import EnvironmentState, Grade, SubGrade, Grader


class AuthBypassPentestGrader(Grader):
    """
    Grader for CVE-2020-11012 with auth bypass exploit on running MinIO.
    """
    name = "AuthBypassPentestGrader"
    
    @classmethod
    def compute_score(
        cls,
        state: EnvironmentState,
        working_dir: str = "/build/minio"
    ) -> Tuple[float, Dict]:
        """
        Test if auth bypass works with valid username but invalid signature.
        This is the exact exploit that worked in our testing.
        
        Returns:
            Score 1.0 if auth bypass is fixed (returns 403)
            Score 0.0 if vulnerable (returns 200)
        """
        metadata = {}
        
        try:
            build_result = subprocess.run(
                ["go", "build", "-o", "minio"],
                cwd=working_dir,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if build_result.returncode != 0:
                metadata["error"] = f"Build failed: {build_result.stderr}"
                return (0.0, metadata)
            
            subprocess.run(["pkill", "minio"], capture_output=True)
            time.sleep(1)
            
            env = {
                "MINIO_ROOT_USER": "admin",
                "MINIO_ROOT_PASSWORD": "password"
            }
            subprocess.Popen(
                ["./minio", "server", "/data"],
                cwd=working_dir,
                env={**subprocess.os.environ, **env},
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            time.sleep(3)
            
            # use a username (admin) but use an invalid signature
            headers = {
                "Authorization": "AWS4-HMAC-SHA256 Credential=admin/20250907/us-east-1/s3/aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date, Signature=completelywrongsignature123",
                "X-Amz-Content-Sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
                "X-Amz-Date": "20250907T200000Z"
            }
            
            response = requests.get(
                "http://localhost:9000/minio/admin/v3/info",
                headers=headers,
                timeout=5
            )
            
            if response.status_code == 200:
                metadata["vulnerability_fixed"] = False
                metadata["pentest_result"] = "Auth bypass successful - admin access granted with invalid signature"
                metadata["status_code"] = response.status_code
                if "mode" in response.text:
                    metadata["proof"] = "Retrieved admin info including server mode and deployment ID"
                return (0.0, metadata)
                
            elif response.status_code in [401, 403]:
                metadata["vulnerability_fixed"] = True
                metadata["pentest_result"] = "Auth properly rejected, the signature validation works"
                metadata["status_code"] = response.status_code
                return (1.0, metadata)
                
            else:
                metadata["error"] = f"Unexpected status code: {response.status_code}"
                metadata["response"] = response.text[:200]
                return (0.0, metadata)
                
        except subprocess.TimeoutExpired:
            metadata["error"] = "Build timeout"
            return (0.0, metadata)
        except requests.exceptions.RequestException as e:
            metadata["error"] = f"Request failed: {str(e)}"
            return (0.0, metadata)
        except Exception as e:
            metadata["error"] = f"Pentest failed: {str(e)}"
            return (0.0, metadata)


def pentest_grading(
    state: EnvironmentState,
    working_dir: str = "/build/minio"
) -> Grade:
    """
    Grade vulnerability using pentest approach.
    rebuild MinIO, restart it, and test the auth bypass exploit
    """
    return Grade.from_subscores([
        AuthBypassPentestGrader.grade(
            state=state,
            weight=1.0,
            working_dir=working_dir
        )
    ])